// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2/log"
	"github.com/lestrrat-go/file-rotatelogs"
	"github.com/northes/kratos-layout/internal/app"
	"github.com/northes/kratos-layout/internal/app/command"
	"github.com/northes/kratos-layout/internal/app/command/handler/greet"
	"github.com/northes/kratos-layout/internal/app/command/script"
	"github.com/northes/kratos-layout/internal/app/component/discovery"
	"github.com/northes/kratos-layout/internal/app/component/orm"
	"github.com/northes/kratos-layout/internal/app/component/redis"
	config2 "github.com/northes/kratos-layout/internal/app/config"
	"github.com/northes/kratos-layout/internal/app/repo/user"
	user2 "github.com/northes/kratos-layout/internal/app/service/user"
	"github.com/northes/kratos-layout/internal/app/transport"
	"github.com/northes/kratos-layout/internal/app/transport/grpc"
	user4 "github.com/northes/kratos-layout/internal/app/transport/grpc/handler/v1/user"
	"github.com/northes/kratos-layout/internal/app/transport/http"
	user3 "github.com/northes/kratos-layout/internal/app/transport/http/handler/v1/user"
	"github.com/northes/kratos-layout/internal/app/transport/http/router"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func initApp(rotateLogs *rotatelogs.RotateLogs, logLogger log.Logger, zapLogger *zap.Logger, configConfig *config2.Config) (*app.App, func(), error) {
	ormConfig := configConfig.DB
	db, cleanup2, err := orm.New(ormConfig, logLogger, zapLogger)
	if err != nil {
		return nil, nil, err
	}
	configApp := configConfig.App
	configHTTP := configConfig.HTTP
	redisConfig := configConfig.Redis
	client, cleanup3, err := redis.New(redisConfig, logLogger)
	if err != nil {
		cleanup2()
		return nil, nil, err
	}
	repository := user.NewRepository(db, client)
	service := user2.NewService(logLogger, repository)
	handler := user3.NewHandler(logLogger, service)
	engine := router.New(handler)
	server := http.NewServer(logLogger, configHTTP, engine)
	configGRPC := configConfig.GRPC
	userHandler := user4.NewHandler(logLogger, service, repository)
	grpcServer := grpc.NewServer(logLogger, configGRPC, userHandler)
	discoveryConfig := configConfig.Discovery
	discoveryDiscovery, err := discovery.New(discoveryConfig, zapLogger)
	if err != nil {
		cleanup3()
		cleanup2()
		return nil, nil, err
	}
	transportTransport := transport.New(logLogger, configApp, server, grpcServer, discoveryDiscovery)
	appApp := app.New(logLogger, db, transportTransport)
	return appApp, func() {
		cleanup3()
		cleanup2()
	}, nil
}

func initCommand(logs *rotatelogs.RotateLogs, logger2 log.Logger, logger3 *zap.Logger, config2_2 *config2.Config) (*command.Command, func(), error) {
	handler := greet.NewHandler(logger2)
	s0000000000 := script.NewS0000000000(logger2)
	commandCommand := command.New(handler, s0000000000)
	return commandCommand, func() {
	}, nil
}
